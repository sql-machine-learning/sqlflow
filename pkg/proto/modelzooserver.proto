syntax = "proto3";
package proto;

message ModelDefRequest {
    // Name of the model definition or trained model.
    // 1. For model definition, it could be a full Docker image URL like:
    //    hub.docker.com/my_group/model_image_name, or path of the image to use the default registry:
    //    my_group/model_image_name
    // 2. For trained model, it's a unique string describes the model, like: my_resnet50_model_imagenet_acc_0.82
    string name = 1;
    // tag of the model definition or trained model, usually a vertion tag like: v0.1
    string tag = 2;
    // content_tar is the model definition's directory which contains a Dockerfile and
    // other files that define some models.
    // or, can be the content of a trained model.
    // The client should use a stream request to upload the contents.
    bytes content_tar = 3;
}

message TrainedModelRequest {
    // A unique name of the trained model.
    string name = 1;
    // A version tag string, like: "v0.1"
    string tag = 2;
    // URL of the trained model, describes the detailed position where the model is actually stored.
    string content_url = 3;
    // Description of the trained model, like what dataset was used to train this model etc.
    string description = 4;
    // Evaluation metric results in JSON format, e.g. {"Accuracy": 0.87, "AUC": 0.73}
    string evaluation_metrics = 5;
}

message ModelResponse {
    // success indicates whether the request is processed successfully.
    bool success = 1;
    // message describe the error details when error occurs.
    string message = 2;
}

message ListModelRequest {
    // start position to fetch model definitions or trained models. Default to 0.
    int64 start = 1;
    // How many record to fetch in this request, used for pagination. If size = -1,
    // return all the records.
    int64 size = 2;
}

message ListModelDefResponse {
    // Model definition Python class names or function names.
    repeated string class_names = 1;
    // The model collection Docker image containing the class.
    repeated string image_urls = 2;
    // Docker image tags.
    repeated string tags = 3;
    // Argument specs for each class.
    repeated string arg_descs = 4;
    // Size of elements in the response lists.
    int64 size = 5;
}

message ListTrainedModelResponse {
    // A list of model definition or trained model names.
    repeated string names = 1;
    // A list of tags of the above list names, the length should be the same as "names".
    repeated string tags = 2;
    // actual place that stores the model, e.g. oss://bucket/path/to/your/model
    repeated string model_store_urls = 3;
    // Docker image used when train this model, should be like "hub.docker.com/image:v0.3".
    repeated string image_urls = 4;
    // Description of the trained model.
    repeated string descriptions = 5;
    // Evaluation metrics of the model.
    repeated string metrics = 6;
    // Size of elements in names.
    int64 size = 7;
}

service ModelZooServer {
    // Returns the list of public available model definitions.
    rpc ListModelDefs (ListModelRequest) returns (ListModelDefResponse);
    // Returns the list of public available trained models.
    rpc ListTrainedModels (ListModelRequest) returns (ListTrainedModelResponse);

    // Release your model definition.
    rpc ReleaseModelDef (stream ModelDefRequest) returns (ModelResponse);
    // Drop your model definition.
    // ModelDefRequest should contain name and tag.
    rpc DropModelDef (ModelDefRequest) returns (ModelResponse);

    // Release your trained model.
    rpc ReleaseTrainedModel (stream TrainedModelRequest) returns (ModelResponse);
    // Drop a trained model, TrainedModelRequest should contain name and tag.
    rpc DropTrainedModel (TrainedModelRequest) returns (ModelResponse);
}
