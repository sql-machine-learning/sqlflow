// Code generated by goyacc -p sql -o parser.go sql.y. DO NOT EDIT.

//line sql.y:2
package sql

import __yyfmt__ "fmt"

//line sql.y:2

import (
	"fmt"
	"strings"
	"sync"
)

/* expr defines an expression as a Lisp list.  If len(val)>0,
   it is an atomic expression, in particular, NUMBER, IDENT,
   or STRING, defined by typ and val; otherwise, it is a
   Lisp S-expression. */
type expr struct {
	typ  int
	val  string
	sexp exprlist
}

type exprlist []*expr

/* construct an atomic expr */
func atomic(typ int, val string) *expr {
	return &expr{
		typ: typ,
		val: val,
	}
}

/* construct a funcall expr */
func funcall(name string, oprd exprlist) *expr {
	return &expr{
		sexp: append(exprlist{atomic(IDENT, name)}, oprd...),
	}
}

/* construct a unary expr */
func unary(typ int, op string, od1 *expr) *expr {
	return &expr{
		sexp: append(exprlist{atomic(typ, op)}, od1),
	}
}

/* construct a binary expr */
func binary(typ int, od1 *expr, op string, od2 *expr) *expr {
	return &expr{
		sexp: append(exprlist{atomic(typ, op)}, od1, od2),
	}
}

/* construct a variadic expr */
func variadic(typ int, op string, ods exprlist) *expr {
	return &expr{
		sexp: append(exprlist{atomic(typ, op)}, ods...),
	}
}

type extendedSelect struct {
	extended bool
	train    bool
	analyze  bool
	standardSelect
	trainClause
	predictClause
	analyzeClause
}

type standardSelect struct {
	fields exprlist
	tables []string
	where  *expr
	limit  string
}

type trainClause struct {
	estimator  string
	trainAttrs attrs
	columns    columnClause
	label      string
	save       string
	validation standardSelect
}

/* If no FOR in the COLUMN, the key is "" */
type columnClause map[string]exprlist
type filedClause exprlist

type attrs map[string]*expr

type predictClause struct {
	predAttrs attrs
	model     string
	into      string
}

type analyzeClause struct {
	analyzeAttrs attrs
	trainedModel string
	explainer    string
}

var parseResult *extendedSelect

func attrsUnion(as1, as2 attrs) attrs {
	for k, v := range as2 {
		if _, ok := as1[k]; ok {
			log.Panicf("attr %q already specified", as2)
		}
		as1[k] = v
	}
	return as1
}

//line sql.y:115
type sqlSymType struct {
	yys  int
	val  string /* NUMBER, IDENT, STRING, and keywords */
	flds exprlist
	tbls []string
	expr *expr
	expl exprlist
	atrs attrs
	eslt extendedSelect
	slct standardSelect
	tran trainClause
	colc columnClause
	labc string
	infr predictClause
	anal analyzeClause
}

const SELECT = 57346
const FROM = 57347
const WHERE = 57348
const LIMIT = 57349
const TRAIN = 57350
const PREDICT = 57351
const ANALYZE = 57352
const WITH = 57353
const COLUMN = 57354
const LABEL = 57355
const USING = 57356
const INTO = 57357
const FOR = 57358
const AS = 57359
const VALIDATE = 57360
const ON = 57361
const IDENT = 57362
const NUMBER = 57363
const STRING = 57364
const AND = 57365
const OR = 57366
const GE = 57367
const LE = 57368
const NE = 57369
const NOT = 57370
const POWER = 57371
const UMINUS = 57372

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SELECT",
	"FROM",
	"WHERE",
	"LIMIT",
	"TRAIN",
	"PREDICT",
	"ANALYZE",
	"WITH",
	"COLUMN",
	"LABEL",
	"USING",
	"INTO",
	"FOR",
	"AS",
	"VALIDATE",
	"ON",
	"IDENT",
	"NUMBER",
	"STRING",
	"AND",
	"OR",
	"'>'",
	"'<'",
	"'='",
	"'!'",
	"GE",
	"LE",
	"NE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"NOT",
	"POWER",
	"UMINUS",
	"';'",
	"'('",
	"')'",
	"','",
	"'['",
	"']'",
	"'\"'",
	"'\\''",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:338

/* Like Lisp's builtin function cdr. */
func (e *expr) cdr() (r []string) {
	for i := 1; i < len(e.sexp); i++ {
		r = append(r, e.sexp[i].String())
	}
	return r
}

/* Convert exprlist to string slice. */
func (el exprlist) Strings() (r []string) {
	for i := 0; i < len(el); i++ {
		r = append(r, el[i].String())
	}
	return r
}

func (e *expr) String() string {
	if e.typ == 0 { /* a compound expression */
		switch e.sexp[0].typ {
		case '+', '*', '/', '%', '=', '<', '>', '!', LE, GE, AND, OR:
			if len(e.sexp) != 3 {
				log.Panicf("Expecting binary expression, got %.10q", e.sexp)
			}
			return fmt.Sprintf("%s %s %s", e.sexp[1], e.sexp[0].val, e.sexp[2])
		case '-':
			switch len(e.sexp) {
			case 2:
				return fmt.Sprintf(" -%s", e.sexp[1])
			case 3:
				return fmt.Sprintf("%s - %s", e.sexp[1], e.sexp[2])
			default:
				log.Panicf("Expecting either unary or binary -, got %.10q", e.sexp)
			}
		case '(':
			if len(e.sexp) != 2 {
				log.Panicf("Expecting ( ) as unary operator, got %.10q", e.sexp)
			}
			return fmt.Sprintf("(%s)", e.sexp[1])
		case '[':
			return "[" + strings.Join(e.cdr(), ", ") + "]"
		case NOT:
			return fmt.Sprintf("NOT %s", e.sexp[1])
		case IDENT: /* function call */
			return e.sexp[0].val + "(" + strings.Join(e.cdr(), ", ") + ")"
		}
	} else {
		return fmt.Sprintf("%s", e.val)
	}

	log.Panicf("Cannot print an unknown expression")
	return ""
}

func (s standardSelect) String() string {
	r := "SELECT "
	if len(s.fields) == 0 {
		r += "*"
	} else {
		for i := 0; i < len(s.fields); i++ {
			r += s.fields[i].String()
			if i != len(s.fields)-1 {
				r += ", "
			}
		}
	}
	r += "\nFROM " + strings.Join(s.tables, ", ")
	if s.where != nil {
		r += fmt.Sprintf("\nWHERE %s", s.where)
	}
	if len(s.limit) > 0 {
		r += fmt.Sprintf("\nLIMIT %s", s.limit)
	}
	return r
}

// sqlReentrantParser makes sqlParser, generated by goyacc and using a
// global variable parseResult to return the result, reentrant.
type sqlSyncParser struct {
	pr sqlParser
}

func newParser() *sqlSyncParser {
	return &sqlSyncParser{sqlNewParser()}
}

var mu sync.Mutex

func (p *sqlSyncParser) Parse(s string) (r *extendedSelect, e error) {
	defer func() {
		if r := recover(); r != nil {
			var ok bool
			e, ok = r.(error)
			if !ok {
				e = fmt.Errorf("%v", r)
			}
		}
	}()

	mu.Lock()
	defer mu.Unlock()

	p.pr.Parse(newLexer(s))
	return parseResult, nil
}

//line yacctab:1
var sqlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const sqlPrivate = 57344

const sqlLast = 205

var sqlAct = [...]int{

	2, 45, 136, 118, 119, 12, 37, 50, 83, 39,
	38, 40, 36, 111, 61, 110, 112, 85, 86, 24,
	138, 58, 47, 133, 94, 61, 46, 89, 88, 147,
	42, 145, 25, 48, 80, 43, 44, 60, 61, 33,
	62, 63, 64, 65, 66, 87, 59, 134, 84, 75,
	134, 18, 17, 78, 79, 77, 84, 84, 57, 16,
	76, 81, 64, 65, 66, 93, 128, 49, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 39, 38, 40, 144, 121, 122, 8, 9,
	10, 113, 117, 14, 125, 47, 53, 140, 55, 46,
	120, 135, 132, 42, 35, 130, 48, 15, 43, 44,
	123, 127, 124, 126, 51, 92, 54, 122, 52, 131,
	4, 34, 32, 21, 39, 38, 40, 20, 19, 143,
	137, 115, 86, 23, 114, 139, 122, 47, 142, 141,
	129, 46, 116, 26, 30, 42, 146, 29, 48, 91,
	43, 44, 73, 74, 69, 68, 67, 22, 71, 70,
	72, 62, 63, 64, 65, 66, 73, 74, 69, 68,
	67, 109, 71, 70, 72, 62, 63, 64, 65, 66,
	69, 68, 67, 3, 71, 70, 72, 62, 63, 64,
	65, 66, 28, 11, 41, 27, 56, 31, 13, 7,
	6, 82, 5, 90, 1,
}
var sqlPact = [...]int{

	179, -1000, 80, 73, -1000, 19, 12, 11, 108, 107,
	103, 152, 116, -24, -9, -1000, -1000, -1000, -1000, 132,
	181, 133, 102, -2, 101, 62, 94, 98, 94, 96,
	94, 15, -1000, 104, -1000, -1000, -5, 143, -1000, -9,
	-1000, -1000, 104, 38, 33, -1000, 104, 104, -11, 5,
	-1000, 18, -1000, 14, -1000, 13, 142, 95, 104, -18,
	-1000, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 129, -31, -34, -1000, -1000,
	-1000, -29, 119, 127, 94, 66, 90, 104, 93, 91,
	-1000, 45, -1000, 143, -1000, 143, 28, 28, -1000, -1000,
	-1000, 8, 8, 8, 8, 8, 8, 155, 155, -1000,
	-1000, -1000, -1000, 125, 85, 66, 82, -1000, 7, -1000,
	-1000, -9, -1000, -1000, -1000, 143, -1000, -1000, -1000, 81,
	112, 4, 112, 77, 66, 112, -1000, 110, 65, -1000,
	-1000, -1000, -1000, -10, -1000, 179, -13, -1000,
}
var sqlPgo = [...]int{

	0, 204, 0, 203, 202, 201, 8, 2, 200, 199,
	198, 197, 6, 1, 4, 196, 12, 194, 3, 193,
	7, 67,
}
var sqlR1 = [...]int{

	0, 1, 1, 1, 1, 2, 15, 15, 3, 3,
	4, 4, 4, 8, 8, 9, 9, 5, 5, 5,
	19, 19, 10, 10, 10, 14, 14, 14, 18, 18,
	6, 6, 7, 11, 11, 20, 21, 21, 13, 13,
	16, 16, 17, 17, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12,
}
var sqlR2 = [...]int{

	0, 2, 3, 3, 3, 6, 0, 2, 0, 2,
	9, 8, 8, 4, 6, 4, 6, 2, 4, 5,
	5, 1, 1, 1, 3, 1, 1, 1, 1, 3,
	2, 2, 5, 1, 3, 3, 1, 3, 3, 4,
	1, 3, 2, 3, 1, 1, 1, 1, 3, 3,
	3, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2,
}
var sqlChk = [...]int{

	-1000, -1, -2, 4, 40, -4, -8, -9, 8, 9,
	10, -19, -13, -10, 20, 34, 40, 40, 40, 20,
	20, 20, 5, 17, 43, 41, 11, 14, 11, 14,
	11, -11, 20, 41, 20, 42, -16, -12, 21, 20,
	22, -17, 41, 46, 47, -13, 37, 33, 44, -21,
	-20, 20, 20, -21, 20, -21, -15, 43, 6, -16,
	42, 43, 32, 33, 34, 35, 36, 27, 26, 25,
	30, 29, 31, 23, 24, -12, 22, 22, -12, -12,
	45, -16, -5, -6, 43, 12, 13, 27, 14, 14,
	-3, 7, 20, -12, 42, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, 42,
	46, 47, 45, -6, 15, 12, 15, -20, -18, -14,
	34, 20, -13, 20, 22, -12, 20, 20, 21, 15,
	20, -18, 20, 16, 43, 20, -7, 18, 16, -7,
	20, -14, -7, 19, 20, 41, -2, 42,
}
var sqlDef = [...]int{

	0, -2, 0, 0, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 23, 22, 2, 3, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 6, 33, 0, 24, 38, 0, 40, 44, 45,
	46, 47, 0, 0, 0, 51, 0, 0, 0, 0,
	36, 0, 13, 0, 15, 0, 8, 0, 0, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 66,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 34, 7, 20, 41, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 48,
	49, 50, 43, 0, 0, 0, 0, 37, 17, 28,
	25, 26, 27, 30, 31, 35, 14, 16, 9, 0,
	0, 0, 0, 0, 0, 0, 11, 0, 0, 12,
	18, 29, 10, 0, 19, 0, 0, 32,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 28, 46, 3, 3, 36, 3, 47,
	41, 42, 34, 32, 43, 33, 3, 35, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 40,
	26, 27, 25, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 44, 3, 45,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 29, 30, 31, 37, 38, 39,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:161
		{
			parseResult = &extendedSelect{
				extended:       false,
				standardSelect: sqlDollar[1].slct}
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:166
		{
			parseResult = &extendedSelect{
				extended:       true,
				train:          true,
				standardSelect: sqlDollar[1].slct,
				trainClause:    sqlDollar[2].tran}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:173
		{
			parseResult = &extendedSelect{
				extended:       true,
				train:          false,
				standardSelect: sqlDollar[1].slct,
				predictClause:  sqlDollar[2].infr}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:180
		{
			parseResult = &extendedSelect{
				extended:       true,
				train:          false,
				analyze:        true,
				standardSelect: sqlDollar[1].slct,
				analyzeClause:  sqlDollar[2].anal}
		}
	case 5:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:191
		{
			sqlVAL.slct.fields = sqlDollar[2].expl
			sqlVAL.slct.tables = sqlDollar[4].tbls
			sqlVAL.slct.where = sqlDollar[5].expr
			sqlVAL.slct.limit = sqlDollar[6].val
		}
	case 6:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:200
		{
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:201
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 8:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:205
		{
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:206
		{
			sqlVAL.val = sqlDollar[2].val
		}
	case 10:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql.y:210
		{
			sqlVAL.tran.estimator = sqlDollar[2].val
			sqlVAL.tran.trainAttrs = sqlDollar[4].atrs
			sqlVAL.tran.columns = sqlDollar[5].colc
			sqlVAL.tran.label = sqlDollar[6].labc
			sqlVAL.tran.save = sqlDollar[8].val
			sqlVAL.tran.validation = sqlDollar[9].slct
		}
	case 11:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:218
		{
			sqlVAL.tran.estimator = sqlDollar[2].val
			sqlVAL.tran.trainAttrs = sqlDollar[4].atrs
			sqlVAL.tran.columns = sqlDollar[5].colc
			sqlVAL.tran.save = sqlDollar[7].val
			sqlVAL.tran.validation = sqlDollar[8].slct
		}
	case 12:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:225
		{
			sqlVAL.tran.estimator = sqlDollar[2].val
			sqlVAL.tran.trainAttrs = sqlDollar[4].atrs
			sqlVAL.tran.label = sqlDollar[5].labc
			sqlVAL.tran.save = sqlDollar[7].val
			sqlVAL.tran.validation = sqlDollar[8].slct
		}
	case 13:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:235
		{
			sqlVAL.infr.into = sqlDollar[2].val
			sqlVAL.infr.model = sqlDollar[4].val
		}
	case 14:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:236
		{
			sqlVAL.infr.into = sqlDollar[2].val
			sqlVAL.infr.predAttrs = sqlDollar[4].atrs
			sqlVAL.infr.model = sqlDollar[6].val
		}
	case 15:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:240
		{
			sqlVAL.anal.trainedModel = sqlDollar[2].val
			sqlVAL.anal.explainer = sqlDollar[4].val
		}
	case 16:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:241
		{
			sqlVAL.anal.trainedModel = sqlDollar[2].val
			sqlVAL.anal.analyzeAttrs = sqlDollar[4].atrs
			sqlVAL.anal.explainer = sqlDollar[6].val
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:245
		{
			sqlVAL.colc = map[string]exprlist{"feature_columns": sqlDollar[2].expl}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:246
		{
			sqlVAL.colc = map[string]exprlist{sqlDollar[4].val: sqlDollar[2].expl}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:247
		{
			sqlVAL.colc[sqlDollar[5].val] = sqlDollar[3].expl
		}
	case 20:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:251
		{
			sqlVAL.expl = exprlist{sqlDollar[1].expr, atomic(IDENT, "AS"), funcall("", sqlDollar[4].expl)}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:254
		{
			sqlVAL.expl = sqlDollar[1].flds
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:258
		{
			sqlVAL.flds = append(sqlVAL.flds, atomic(IDENT, "*"))
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:259
		{
			sqlVAL.flds = append(sqlVAL.flds, atomic(IDENT, sqlDollar[1].val))
		}
	case 24:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:260
		{
			sqlVAL.flds = append(sqlDollar[1].flds, atomic(IDENT, sqlDollar[3].val))
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:264
		{
			sqlVAL.expr = atomic(IDENT, "*")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:265
		{
			sqlVAL.expr = atomic(IDENT, sqlDollar[1].val)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:266
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:270
		{
			sqlVAL.expl = exprlist{sqlDollar[1].expr}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:271
		{
			sqlVAL.expl = append(sqlDollar[1].expl, sqlDollar[3].expr)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:275
		{
			sqlVAL.labc = sqlDollar[2].val
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:276
		{
			sqlVAL.labc = sqlDollar[2].val[1 : len(sqlDollar[2].val)-1]
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:280
		{
			sqlVAL.slct = sqlDollar[4].slct
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:284
		{
			sqlVAL.tbls = []string{sqlDollar[1].val}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:285
		{
			sqlVAL.tbls = append(sqlDollar[1].tbls, sqlDollar[3].val)
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:289
		{
			sqlVAL.atrs = attrs{sqlDollar[1].val: sqlDollar[3].expr}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:293
		{
			sqlVAL.atrs = sqlDollar[1].atrs
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:294
		{
			sqlVAL.atrs = attrsUnion(sqlDollar[1].atrs, sqlDollar[3].atrs)
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:298
		{
			sqlVAL.expr = funcall(sqlDollar[1].val, nil)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:299
		{
			sqlVAL.expr = funcall(sqlDollar[1].val, sqlDollar[3].expl)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:303
		{
			sqlVAL.expl = exprlist{sqlDollar[1].expr}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:304
		{
			sqlVAL.expl = append(sqlDollar[1].expl, sqlDollar[3].expr)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:308
		{
			sqlVAL.expl = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:309
		{
			sqlVAL.expl = sqlDollar[2].expl
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:313
		{
			sqlVAL.expr = atomic(NUMBER, sqlDollar[1].val)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:314
		{
			sqlVAL.expr = atomic(IDENT, sqlDollar[1].val)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:315
		{
			sqlVAL.expr = atomic(STRING, sqlDollar[1].val)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:316
		{
			sqlVAL.expr = variadic('[', "square", sqlDollar[1].expl)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:317
		{
			sqlVAL.expr = unary('(', "paren", sqlDollar[2].expr)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:318
		{
			sqlVAL.expr = unary('"', "quota", atomic(STRING, sqlDollar[2].val))
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:319
		{
			sqlVAL.expr = unary('\'', "quota", atomic(STRING, sqlDollar[2].val))
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:320
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:321
		{
			sqlVAL.expr = binary('+', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:322
		{
			sqlVAL.expr = binary('-', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:323
		{
			sqlVAL.expr = binary('*', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:324
		{
			sqlVAL.expr = binary('/', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:325
		{
			sqlVAL.expr = binary('%', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:326
		{
			sqlVAL.expr = binary('=', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:327
		{
			sqlVAL.expr = binary('<', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:328
		{
			sqlVAL.expr = binary('>', sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:329
		{
			sqlVAL.expr = binary(LE, sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:330
		{
			sqlVAL.expr = binary(GE, sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:331
		{
			sqlVAL.expr = binary(NE, sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:332
		{
			sqlVAL.expr = binary(AND, sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:333
		{
			sqlVAL.expr = binary(OR, sqlDollar[1].expr, sqlDollar[2].val, sqlDollar[3].expr)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:334
		{
			sqlVAL.expr = unary(NOT, sqlDollar[1].val, sqlDollar[2].expr)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:335
		{
			sqlVAL.expr = unary('-', sqlDollar[1].val, sqlDollar[2].expr)
		}
	}
	goto sqlstack /* stack new state and value */
}
