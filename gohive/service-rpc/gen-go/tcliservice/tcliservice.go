// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tcliservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TCLIService interface {
	// Parameters:
	//  - Req
	OpenSession(req *TOpenSessionReq) (r *TOpenSessionResp, err error)
	// Parameters:
	//  - Req
	CloseSession(req *TCloseSessionReq) (r *TCloseSessionResp, err error)
	// Parameters:
	//  - Req
	GetInfo(req *TGetInfoReq) (r *TGetInfoResp, err error)
	// Parameters:
	//  - Req
	ExecuteStatement(req *TExecuteStatementReq) (r *TExecuteStatementResp, err error)
	// Parameters:
	//  - Req
	GetTypeInfo(req *TGetTypeInfoReq) (r *TGetTypeInfoResp, err error)
	// Parameters:
	//  - Req
	GetCatalogs(req *TGetCatalogsReq) (r *TGetCatalogsResp, err error)
	// Parameters:
	//  - Req
	GetSchemas(req *TGetSchemasReq) (r *TGetSchemasResp, err error)
	// Parameters:
	//  - Req
	GetTables(req *TGetTablesReq) (r *TGetTablesResp, err error)
	// Parameters:
	//  - Req
	GetTableTypes(req *TGetTableTypesReq) (r *TGetTableTypesResp, err error)
	// Parameters:
	//  - Req
	GetColumns(req *TGetColumnsReq) (r *TGetColumnsResp, err error)
	// Parameters:
	//  - Req
	GetFunctions(req *TGetFunctionsReq) (r *TGetFunctionsResp, err error)
	// Parameters:
	//  - Req
	GetOperationStatus(req *TGetOperationStatusReq) (r *TGetOperationStatusResp, err error)
	// Parameters:
	//  - Req
	CancelOperation(req *TCancelOperationReq) (r *TCancelOperationResp, err error)
	// Parameters:
	//  - Req
	CloseOperation(req *TCloseOperationReq) (r *TCloseOperationResp, err error)
	// Parameters:
	//  - Req
	GetResultSetMetadata(req *TGetResultSetMetadataReq) (r *TGetResultSetMetadataResp, err error)
	// Parameters:
	//  - Req
	FetchResults(req *TFetchResultsReq) (r *TFetchResultsResp, err error)
	// Parameters:
	//  - Req
	GetDelegationToken(req *TGetDelegationTokenReq) (r *TGetDelegationTokenResp, err error)
	// Parameters:
	//  - Req
	CancelDelegationToken(req *TCancelDelegationTokenReq) (r *TCancelDelegationTokenResp, err error)
	// Parameters:
	//  - Req
	RenewDelegationToken(req *TRenewDelegationTokenReq) (r *TRenewDelegationTokenResp, err error)
}

type TCLIServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTCLIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TCLIServiceClient {
	return &TCLIServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTCLIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TCLIServiceClient {
	return &TCLIServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) OpenSession(req *TOpenSessionReq) (r *TOpenSessionResp, err error) {
	if err = p.sendOpenSession(req); err != nil {
		return
	}
	return p.recvOpenSession()
}

func (p *TCLIServiceClient) sendOpenSession(req *TOpenSessionReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OpenSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceOpenSessionArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvOpenSession() (value *TOpenSessionResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "OpenSession" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "OpenSession failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OpenSession failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "OpenSession failed: invalid message type")
		return
	}
	result := TCLIServiceOpenSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) CloseSession(req *TCloseSessionReq) (r *TCloseSessionResp, err error) {
	if err = p.sendCloseSession(req); err != nil {
		return
	}
	return p.recvCloseSession()
}

func (p *TCLIServiceClient) sendCloseSession(req *TCloseSessionReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CloseSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceCloseSessionArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvCloseSession() (value *TCloseSessionResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CloseSession" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CloseSession failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CloseSession failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CloseSession failed: invalid message type")
		return
	}
	result := TCLIServiceCloseSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetInfo(req *TGetInfoReq) (r *TGetInfoResp, err error) {
	if err = p.sendGetInfo(req); err != nil {
		return
	}
	return p.recvGetInfo()
}

func (p *TCLIServiceClient) sendGetInfo(req *TGetInfoReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetInfo() (value *TGetInfoResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetInfo failed: invalid message type")
		return
	}
	result := TCLIServiceGetInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) ExecuteStatement(req *TExecuteStatementReq) (r *TExecuteStatementResp, err error) {
	if err = p.sendExecuteStatement(req); err != nil {
		return
	}
	return p.recvExecuteStatement()
}

func (p *TCLIServiceClient) sendExecuteStatement(req *TExecuteStatementReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ExecuteStatement", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceExecuteStatementArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvExecuteStatement() (value *TExecuteStatementResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ExecuteStatement" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ExecuteStatement failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ExecuteStatement failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ExecuteStatement failed: invalid message type")
		return
	}
	result := TCLIServiceExecuteStatementResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetTypeInfo(req *TGetTypeInfoReq) (r *TGetTypeInfoResp, err error) {
	if err = p.sendGetTypeInfo(req); err != nil {
		return
	}
	return p.recvGetTypeInfo()
}

func (p *TCLIServiceClient) sendGetTypeInfo(req *TGetTypeInfoReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetTypeInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetTypeInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetTypeInfo() (value *TGetTypeInfoResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetTypeInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetTypeInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetTypeInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetTypeInfo failed: invalid message type")
		return
	}
	result := TCLIServiceGetTypeInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetCatalogs(req *TGetCatalogsReq) (r *TGetCatalogsResp, err error) {
	if err = p.sendGetCatalogs(req); err != nil {
		return
	}
	return p.recvGetCatalogs()
}

func (p *TCLIServiceClient) sendGetCatalogs(req *TGetCatalogsReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetCatalogs", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetCatalogsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetCatalogs() (value *TGetCatalogsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetCatalogs" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetCatalogs failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetCatalogs failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetCatalogs failed: invalid message type")
		return
	}
	result := TCLIServiceGetCatalogsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetSchemas(req *TGetSchemasReq) (r *TGetSchemasResp, err error) {
	if err = p.sendGetSchemas(req); err != nil {
		return
	}
	return p.recvGetSchemas()
}

func (p *TCLIServiceClient) sendGetSchemas(req *TGetSchemasReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSchemas", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetSchemasArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetSchemas() (value *TGetSchemasResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSchemas" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSchemas failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSchemas failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSchemas failed: invalid message type")
		return
	}
	result := TCLIServiceGetSchemasResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetTables(req *TGetTablesReq) (r *TGetTablesResp, err error) {
	if err = p.sendGetTables(req); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *TCLIServiceClient) sendGetTables(req *TGetTablesReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetTables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetTablesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetTables() (value *TGetTablesResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetTables" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetTables failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetTables failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetTables failed: invalid message type")
		return
	}
	result := TCLIServiceGetTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetTableTypes(req *TGetTableTypesReq) (r *TGetTableTypesResp, err error) {
	if err = p.sendGetTableTypes(req); err != nil {
		return
	}
	return p.recvGetTableTypes()
}

func (p *TCLIServiceClient) sendGetTableTypes(req *TGetTableTypesReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetTableTypes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetTableTypesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetTableTypes() (value *TGetTableTypesResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetTableTypes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetTableTypes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetTableTypes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetTableTypes failed: invalid message type")
		return
	}
	result := TCLIServiceGetTableTypesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetColumns(req *TGetColumnsReq) (r *TGetColumnsResp, err error) {
	if err = p.sendGetColumns(req); err != nil {
		return
	}
	return p.recvGetColumns()
}

func (p *TCLIServiceClient) sendGetColumns(req *TGetColumnsReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetColumns", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetColumnsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetColumns() (value *TGetColumnsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetColumns" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetColumns failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetColumns failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetColumns failed: invalid message type")
		return
	}
	result := TCLIServiceGetColumnsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetFunctions(req *TGetFunctionsReq) (r *TGetFunctionsResp, err error) {
	if err = p.sendGetFunctions(req); err != nil {
		return
	}
	return p.recvGetFunctions()
}

func (p *TCLIServiceClient) sendGetFunctions(req *TGetFunctionsReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetFunctions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetFunctionsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetFunctions() (value *TGetFunctionsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetFunctions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetFunctions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetFunctions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetFunctions failed: invalid message type")
		return
	}
	result := TCLIServiceGetFunctionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetOperationStatus(req *TGetOperationStatusReq) (r *TGetOperationStatusResp, err error) {
	if err = p.sendGetOperationStatus(req); err != nil {
		return
	}
	return p.recvGetOperationStatus()
}

func (p *TCLIServiceClient) sendGetOperationStatus(req *TGetOperationStatusReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetOperationStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetOperationStatusArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetOperationStatus() (value *TGetOperationStatusResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetOperationStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetOperationStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetOperationStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetOperationStatus failed: invalid message type")
		return
	}
	result := TCLIServiceGetOperationStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) CancelOperation(req *TCancelOperationReq) (r *TCancelOperationResp, err error) {
	if err = p.sendCancelOperation(req); err != nil {
		return
	}
	return p.recvCancelOperation()
}

func (p *TCLIServiceClient) sendCancelOperation(req *TCancelOperationReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CancelOperation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceCancelOperationArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvCancelOperation() (value *TCancelOperationResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CancelOperation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CancelOperation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CancelOperation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CancelOperation failed: invalid message type")
		return
	}
	result := TCLIServiceCancelOperationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) CloseOperation(req *TCloseOperationReq) (r *TCloseOperationResp, err error) {
	if err = p.sendCloseOperation(req); err != nil {
		return
	}
	return p.recvCloseOperation()
}

func (p *TCLIServiceClient) sendCloseOperation(req *TCloseOperationReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CloseOperation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceCloseOperationArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvCloseOperation() (value *TCloseOperationResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CloseOperation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CloseOperation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CloseOperation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CloseOperation failed: invalid message type")
		return
	}
	result := TCLIServiceCloseOperationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetResultSetMetadata(req *TGetResultSetMetadataReq) (r *TGetResultSetMetadataResp, err error) {
	if err = p.sendGetResultSetMetadata(req); err != nil {
		return
	}
	return p.recvGetResultSetMetadata()
}

func (p *TCLIServiceClient) sendGetResultSetMetadata(req *TGetResultSetMetadataReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetResultSetMetadata", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetResultSetMetadataArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetResultSetMetadata() (value *TGetResultSetMetadataResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetResultSetMetadata" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetResultSetMetadata failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetResultSetMetadata failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetResultSetMetadata failed: invalid message type")
		return
	}
	result := TCLIServiceGetResultSetMetadataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) FetchResults(req *TFetchResultsReq) (r *TFetchResultsResp, err error) {
	if err = p.sendFetchResults(req); err != nil {
		return
	}
	return p.recvFetchResults()
}

func (p *TCLIServiceClient) sendFetchResults(req *TFetchResultsReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("FetchResults", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceFetchResultsArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvFetchResults() (value *TFetchResultsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "FetchResults" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FetchResults failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FetchResults failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FetchResults failed: invalid message type")
		return
	}
	result := TCLIServiceFetchResultsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) GetDelegationToken(req *TGetDelegationTokenReq) (r *TGetDelegationTokenResp, err error) {
	if err = p.sendGetDelegationToken(req); err != nil {
		return
	}
	return p.recvGetDelegationToken()
}

func (p *TCLIServiceClient) sendGetDelegationToken(req *TGetDelegationTokenReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetDelegationToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceGetDelegationTokenArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvGetDelegationToken() (value *TGetDelegationTokenResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetDelegationToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetDelegationToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetDelegationToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetDelegationToken failed: invalid message type")
		return
	}
	result := TCLIServiceGetDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) CancelDelegationToken(req *TCancelDelegationTokenReq) (r *TCancelDelegationTokenResp, err error) {
	if err = p.sendCancelDelegationToken(req); err != nil {
		return
	}
	return p.recvCancelDelegationToken()
}

func (p *TCLIServiceClient) sendCancelDelegationToken(req *TCancelDelegationTokenReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CancelDelegationToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceCancelDelegationTokenArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvCancelDelegationToken() (value *TCancelDelegationTokenResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CancelDelegationToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CancelDelegationToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CancelDelegationToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CancelDelegationToken failed: invalid message type")
		return
	}
	result := TCLIServiceCancelDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *TCLIServiceClient) RenewDelegationToken(req *TRenewDelegationTokenReq) (r *TRenewDelegationTokenResp, err error) {
	if err = p.sendRenewDelegationToken(req); err != nil {
		return
	}
	return p.recvRenewDelegationToken()
}

func (p *TCLIServiceClient) sendRenewDelegationToken(req *TRenewDelegationTokenReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RenewDelegationToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TCLIServiceRenewDelegationTokenArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TCLIServiceClient) recvRenewDelegationToken() (value *TRenewDelegationTokenResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RenewDelegationToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RenewDelegationToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RenewDelegationToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RenewDelegationToken failed: invalid message type")
		return
	}
	result := TCLIServiceRenewDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type TCLIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TCLIService
}

func (p *TCLIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TCLIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TCLIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTCLIServiceProcessor(handler TCLIService) *TCLIServiceProcessor {

	self65 := &TCLIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self65.processorMap["OpenSession"] = &tCLIServiceProcessorOpenSession{handler: handler}
	self65.processorMap["CloseSession"] = &tCLIServiceProcessorCloseSession{handler: handler}
	self65.processorMap["GetInfo"] = &tCLIServiceProcessorGetInfo{handler: handler}
	self65.processorMap["ExecuteStatement"] = &tCLIServiceProcessorExecuteStatement{handler: handler}
	self65.processorMap["GetTypeInfo"] = &tCLIServiceProcessorGetTypeInfo{handler: handler}
	self65.processorMap["GetCatalogs"] = &tCLIServiceProcessorGetCatalogs{handler: handler}
	self65.processorMap["GetSchemas"] = &tCLIServiceProcessorGetSchemas{handler: handler}
	self65.processorMap["GetTables"] = &tCLIServiceProcessorGetTables{handler: handler}
	self65.processorMap["GetTableTypes"] = &tCLIServiceProcessorGetTableTypes{handler: handler}
	self65.processorMap["GetColumns"] = &tCLIServiceProcessorGetColumns{handler: handler}
	self65.processorMap["GetFunctions"] = &tCLIServiceProcessorGetFunctions{handler: handler}
	self65.processorMap["GetOperationStatus"] = &tCLIServiceProcessorGetOperationStatus{handler: handler}
	self65.processorMap["CancelOperation"] = &tCLIServiceProcessorCancelOperation{handler: handler}
	self65.processorMap["CloseOperation"] = &tCLIServiceProcessorCloseOperation{handler: handler}
	self65.processorMap["GetResultSetMetadata"] = &tCLIServiceProcessorGetResultSetMetadata{handler: handler}
	self65.processorMap["FetchResults"] = &tCLIServiceProcessorFetchResults{handler: handler}
	self65.processorMap["GetDelegationToken"] = &tCLIServiceProcessorGetDelegationToken{handler: handler}
	self65.processorMap["CancelDelegationToken"] = &tCLIServiceProcessorCancelDelegationToken{handler: handler}
	self65.processorMap["RenewDelegationToken"] = &tCLIServiceProcessorRenewDelegationToken{handler: handler}
	return self65
}

func (p *TCLIServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x66 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x66.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x66

}

type tCLIServiceProcessorOpenSession struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorOpenSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceOpenSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OpenSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceOpenSessionResult{}
	var retval *TOpenSessionResp
	var err2 error
	if retval, err2 = p.handler.OpenSession(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OpenSession: "+err2.Error())
		oprot.WriteMessageBegin("OpenSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OpenSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorCloseSession struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorCloseSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceCloseSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CloseSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceCloseSessionResult{}
	var retval *TCloseSessionResp
	var err2 error
	if retval, err2 = p.handler.CloseSession(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CloseSession: "+err2.Error())
		oprot.WriteMessageBegin("CloseSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CloseSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetInfo struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetInfoResult{}
	var retval *TGetInfoResp
	var err2 error
	if retval, err2 = p.handler.GetInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorExecuteStatement struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorExecuteStatement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceExecuteStatementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ExecuteStatement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceExecuteStatementResult{}
	var retval *TExecuteStatementResp
	var err2 error
	if retval, err2 = p.handler.ExecuteStatement(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ExecuteStatement: "+err2.Error())
		oprot.WriteMessageBegin("ExecuteStatement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ExecuteStatement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetTypeInfo struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetTypeInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetTypeInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTypeInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetTypeInfoResult{}
	var retval *TGetTypeInfoResp
	var err2 error
	if retval, err2 = p.handler.GetTypeInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTypeInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetTypeInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTypeInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetCatalogs struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetCatalogs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetCatalogsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCatalogs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetCatalogsResult{}
	var retval *TGetCatalogsResp
	var err2 error
	if retval, err2 = p.handler.GetCatalogs(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCatalogs: "+err2.Error())
		oprot.WriteMessageBegin("GetCatalogs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCatalogs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetSchemas struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetSchemas) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetSchemasArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSchemas", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetSchemasResult{}
	var retval *TGetSchemasResp
	var err2 error
	if retval, err2 = p.handler.GetSchemas(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSchemas: "+err2.Error())
		oprot.WriteMessageBegin("GetSchemas", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSchemas", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetTables struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetTablesResult{}
	var retval *TGetTablesResp
	var err2 error
	if retval, err2 = p.handler.GetTables(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTables: "+err2.Error())
		oprot.WriteMessageBegin("GetTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetTableTypes struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetTableTypes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetTableTypesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTableTypes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetTableTypesResult{}
	var retval *TGetTableTypesResp
	var err2 error
	if retval, err2 = p.handler.GetTableTypes(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTableTypes: "+err2.Error())
		oprot.WriteMessageBegin("GetTableTypes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTableTypes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetColumns struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetColumnsResult{}
	var retval *TGetColumnsResp
	var err2 error
	if retval, err2 = p.handler.GetColumns(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetColumns: "+err2.Error())
		oprot.WriteMessageBegin("GetColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetFunctions struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetFunctions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetFunctionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFunctions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetFunctionsResult{}
	var retval *TGetFunctionsResp
	var err2 error
	if retval, err2 = p.handler.GetFunctions(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFunctions: "+err2.Error())
		oprot.WriteMessageBegin("GetFunctions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFunctions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetOperationStatus struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetOperationStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetOperationStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetOperationStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetOperationStatusResult{}
	var retval *TGetOperationStatusResp
	var err2 error
	if retval, err2 = p.handler.GetOperationStatus(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetOperationStatus: "+err2.Error())
		oprot.WriteMessageBegin("GetOperationStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetOperationStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorCancelOperation struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorCancelOperation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceCancelOperationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CancelOperation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceCancelOperationResult{}
	var retval *TCancelOperationResp
	var err2 error
	if retval, err2 = p.handler.CancelOperation(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelOperation: "+err2.Error())
		oprot.WriteMessageBegin("CancelOperation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CancelOperation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorCloseOperation struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorCloseOperation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceCloseOperationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CloseOperation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceCloseOperationResult{}
	var retval *TCloseOperationResp
	var err2 error
	if retval, err2 = p.handler.CloseOperation(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CloseOperation: "+err2.Error())
		oprot.WriteMessageBegin("CloseOperation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CloseOperation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetResultSetMetadata struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetResultSetMetadata) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetResultSetMetadataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetResultSetMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetResultSetMetadataResult{}
	var retval *TGetResultSetMetadataResp
	var err2 error
	if retval, err2 = p.handler.GetResultSetMetadata(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetResultSetMetadata: "+err2.Error())
		oprot.WriteMessageBegin("GetResultSetMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetResultSetMetadata", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorFetchResults struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorFetchResults) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceFetchResultsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FetchResults", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceFetchResultsResult{}
	var retval *TFetchResultsResp
	var err2 error
	if retval, err2 = p.handler.FetchResults(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FetchResults: "+err2.Error())
		oprot.WriteMessageBegin("FetchResults", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FetchResults", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorGetDelegationToken struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorGetDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceGetDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDelegationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceGetDelegationTokenResult{}
	var retval *TGetDelegationTokenResp
	var err2 error
	if retval, err2 = p.handler.GetDelegationToken(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDelegationToken: "+err2.Error())
		oprot.WriteMessageBegin("GetDelegationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDelegationToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorCancelDelegationToken struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorCancelDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceCancelDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CancelDelegationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceCancelDelegationTokenResult{}
	var retval *TCancelDelegationTokenResp
	var err2 error
	if retval, err2 = p.handler.CancelDelegationToken(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelDelegationToken: "+err2.Error())
		oprot.WriteMessageBegin("CancelDelegationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CancelDelegationToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tCLIServiceProcessorRenewDelegationToken struct {
	handler TCLIService
}

func (p *tCLIServiceProcessorRenewDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TCLIServiceRenewDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RenewDelegationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TCLIServiceRenewDelegationTokenResult{}
	var retval *TRenewDelegationTokenResp
	var err2 error
	if retval, err2 = p.handler.RenewDelegationToken(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RenewDelegationToken: "+err2.Error())
		oprot.WriteMessageBegin("RenewDelegationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RenewDelegationToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type TCLIServiceOpenSessionArgs struct {
	Req *TOpenSessionReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceOpenSessionArgs() *TCLIServiceOpenSessionArgs {
	return &TCLIServiceOpenSessionArgs{}
}

var TCLIServiceOpenSessionArgs_Req_DEFAULT *TOpenSessionReq

func (p *TCLIServiceOpenSessionArgs) GetReq() *TOpenSessionReq {
	if !p.IsSetReq() {
		return TCLIServiceOpenSessionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceOpenSessionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceOpenSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceOpenSessionArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TOpenSessionReq{
		ClientProtocol: 7,
	}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceOpenSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceOpenSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceOpenSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceOpenSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceOpenSessionResult struct {
	Success *TOpenSessionResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceOpenSessionResult() *TCLIServiceOpenSessionResult {
	return &TCLIServiceOpenSessionResult{}
}

var TCLIServiceOpenSessionResult_Success_DEFAULT *TOpenSessionResp

func (p *TCLIServiceOpenSessionResult) GetSuccess() *TOpenSessionResp {
	if !p.IsSetSuccess() {
		return TCLIServiceOpenSessionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceOpenSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceOpenSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceOpenSessionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TOpenSessionResp{
		ServerProtocolVersion: 7,
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceOpenSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceOpenSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceOpenSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceOpenSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceCloseSessionArgs struct {
	Req *TCloseSessionReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceCloseSessionArgs() *TCLIServiceCloseSessionArgs {
	return &TCLIServiceCloseSessionArgs{}
}

var TCLIServiceCloseSessionArgs_Req_DEFAULT *TCloseSessionReq

func (p *TCLIServiceCloseSessionArgs) GetReq() *TCloseSessionReq {
	if !p.IsSetReq() {
		return TCLIServiceCloseSessionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceCloseSessionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceCloseSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCloseSessionArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TCloseSessionReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceCloseSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloseSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCloseSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceCloseSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCloseSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceCloseSessionResult struct {
	Success *TCloseSessionResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceCloseSessionResult() *TCLIServiceCloseSessionResult {
	return &TCLIServiceCloseSessionResult{}
}

var TCLIServiceCloseSessionResult_Success_DEFAULT *TCloseSessionResp

func (p *TCLIServiceCloseSessionResult) GetSuccess() *TCloseSessionResp {
	if !p.IsSetSuccess() {
		return TCLIServiceCloseSessionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceCloseSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceCloseSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCloseSessionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TCloseSessionResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceCloseSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloseSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCloseSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceCloseSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCloseSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetInfoArgs struct {
	Req *TGetInfoReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetInfoArgs() *TCLIServiceGetInfoArgs {
	return &TCLIServiceGetInfoArgs{}
}

var TCLIServiceGetInfoArgs_Req_DEFAULT *TGetInfoReq

func (p *TCLIServiceGetInfoArgs) GetReq() *TGetInfoReq {
	if !p.IsSetReq() {
		return TCLIServiceGetInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetInfoReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetInfoResult struct {
	Success *TGetInfoResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetInfoResult() *TCLIServiceGetInfoResult {
	return &TCLIServiceGetInfoResult{}
}

var TCLIServiceGetInfoResult_Success_DEFAULT *TGetInfoResp

func (p *TCLIServiceGetInfoResult) GetSuccess() *TGetInfoResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetInfoResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceExecuteStatementArgs struct {
	Req *TExecuteStatementReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceExecuteStatementArgs() *TCLIServiceExecuteStatementArgs {
	return &TCLIServiceExecuteStatementArgs{}
}

var TCLIServiceExecuteStatementArgs_Req_DEFAULT *TExecuteStatementReq

func (p *TCLIServiceExecuteStatementArgs) GetReq() *TExecuteStatementReq {
	if !p.IsSetReq() {
		return TCLIServiceExecuteStatementArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceExecuteStatementArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceExecuteStatementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceExecuteStatementArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TExecuteStatementReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceExecuteStatementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteStatement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceExecuteStatementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceExecuteStatementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceExecuteStatementArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceExecuteStatementResult struct {
	Success *TExecuteStatementResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceExecuteStatementResult() *TCLIServiceExecuteStatementResult {
	return &TCLIServiceExecuteStatementResult{}
}

var TCLIServiceExecuteStatementResult_Success_DEFAULT *TExecuteStatementResp

func (p *TCLIServiceExecuteStatementResult) GetSuccess() *TExecuteStatementResp {
	if !p.IsSetSuccess() {
		return TCLIServiceExecuteStatementResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceExecuteStatementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceExecuteStatementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceExecuteStatementResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TExecuteStatementResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceExecuteStatementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteStatement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceExecuteStatementResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceExecuteStatementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceExecuteStatementResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetTypeInfoArgs struct {
	Req *TGetTypeInfoReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetTypeInfoArgs() *TCLIServiceGetTypeInfoArgs {
	return &TCLIServiceGetTypeInfoArgs{}
}

var TCLIServiceGetTypeInfoArgs_Req_DEFAULT *TGetTypeInfoReq

func (p *TCLIServiceGetTypeInfoArgs) GetReq() *TGetTypeInfoReq {
	if !p.IsSetReq() {
		return TCLIServiceGetTypeInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetTypeInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetTypeInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetTypeInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetTypeInfoReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetTypeInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTypeInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetTypeInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetTypeInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetTypeInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetTypeInfoResult struct {
	Success *TGetTypeInfoResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetTypeInfoResult() *TCLIServiceGetTypeInfoResult {
	return &TCLIServiceGetTypeInfoResult{}
}

var TCLIServiceGetTypeInfoResult_Success_DEFAULT *TGetTypeInfoResp

func (p *TCLIServiceGetTypeInfoResult) GetSuccess() *TGetTypeInfoResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetTypeInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetTypeInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetTypeInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetTypeInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetTypeInfoResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetTypeInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTypeInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetTypeInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetTypeInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetTypeInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetCatalogsArgs struct {
	Req *TGetCatalogsReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetCatalogsArgs() *TCLIServiceGetCatalogsArgs {
	return &TCLIServiceGetCatalogsArgs{}
}

var TCLIServiceGetCatalogsArgs_Req_DEFAULT *TGetCatalogsReq

func (p *TCLIServiceGetCatalogsArgs) GetReq() *TGetCatalogsReq {
	if !p.IsSetReq() {
		return TCLIServiceGetCatalogsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetCatalogsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetCatalogsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetCatalogsArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetCatalogsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetCatalogsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCatalogs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetCatalogsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetCatalogsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetCatalogsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetCatalogsResult struct {
	Success *TGetCatalogsResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetCatalogsResult() *TCLIServiceGetCatalogsResult {
	return &TCLIServiceGetCatalogsResult{}
}

var TCLIServiceGetCatalogsResult_Success_DEFAULT *TGetCatalogsResp

func (p *TCLIServiceGetCatalogsResult) GetSuccess() *TGetCatalogsResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetCatalogsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetCatalogsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetCatalogsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetCatalogsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetCatalogsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetCatalogsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCatalogs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetCatalogsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetCatalogsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetCatalogsResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetSchemasArgs struct {
	Req *TGetSchemasReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetSchemasArgs() *TCLIServiceGetSchemasArgs {
	return &TCLIServiceGetSchemasArgs{}
}

var TCLIServiceGetSchemasArgs_Req_DEFAULT *TGetSchemasReq

func (p *TCLIServiceGetSchemasArgs) GetReq() *TGetSchemasReq {
	if !p.IsSetReq() {
		return TCLIServiceGetSchemasArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetSchemasArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetSchemasArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetSchemasArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetSchemasReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetSchemasArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSchemas_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetSchemasArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetSchemasArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetSchemasArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetSchemasResult struct {
	Success *TGetSchemasResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetSchemasResult() *TCLIServiceGetSchemasResult {
	return &TCLIServiceGetSchemasResult{}
}

var TCLIServiceGetSchemasResult_Success_DEFAULT *TGetSchemasResp

func (p *TCLIServiceGetSchemasResult) GetSuccess() *TGetSchemasResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetSchemasResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetSchemasResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetSchemasResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetSchemasResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetSchemasResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetSchemasResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSchemas_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetSchemasResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetSchemasResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetSchemasResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetTablesArgs struct {
	Req *TGetTablesReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetTablesArgs() *TCLIServiceGetTablesArgs {
	return &TCLIServiceGetTablesArgs{}
}

var TCLIServiceGetTablesArgs_Req_DEFAULT *TGetTablesReq

func (p *TCLIServiceGetTablesArgs) GetReq() *TGetTablesReq {
	if !p.IsSetReq() {
		return TCLIServiceGetTablesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetTablesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetTablesArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetTablesReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTables_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetTablesResult struct {
	Success *TGetTablesResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetTablesResult() *TCLIServiceGetTablesResult {
	return &TCLIServiceGetTablesResult{}
}

var TCLIServiceGetTablesResult_Success_DEFAULT *TGetTablesResp

func (p *TCLIServiceGetTablesResult) GetSuccess() *TGetTablesResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetTablesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetTablesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetTablesResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTables_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetTablesResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetTableTypesArgs struct {
	Req *TGetTableTypesReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetTableTypesArgs() *TCLIServiceGetTableTypesArgs {
	return &TCLIServiceGetTableTypesArgs{}
}

var TCLIServiceGetTableTypesArgs_Req_DEFAULT *TGetTableTypesReq

func (p *TCLIServiceGetTableTypesArgs) GetReq() *TGetTableTypesReq {
	if !p.IsSetReq() {
		return TCLIServiceGetTableTypesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetTableTypesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetTableTypesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetTableTypesArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetTableTypesReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetTableTypesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTableTypes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetTableTypesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetTableTypesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetTableTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetTableTypesResult struct {
	Success *TGetTableTypesResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetTableTypesResult() *TCLIServiceGetTableTypesResult {
	return &TCLIServiceGetTableTypesResult{}
}

var TCLIServiceGetTableTypesResult_Success_DEFAULT *TGetTableTypesResp

func (p *TCLIServiceGetTableTypesResult) GetSuccess() *TGetTableTypesResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetTableTypesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetTableTypesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetTableTypesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetTableTypesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetTableTypesResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetTableTypesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTableTypes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetTableTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetTableTypesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetTableTypesResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetColumnsArgs struct {
	Req *TGetColumnsReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetColumnsArgs() *TCLIServiceGetColumnsArgs {
	return &TCLIServiceGetColumnsArgs{}
}

var TCLIServiceGetColumnsArgs_Req_DEFAULT *TGetColumnsReq

func (p *TCLIServiceGetColumnsArgs) GetReq() *TGetColumnsReq {
	if !p.IsSetReq() {
		return TCLIServiceGetColumnsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetColumnsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetColumnsArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetColumnsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetColumns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetColumnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetColumnsResult struct {
	Success *TGetColumnsResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetColumnsResult() *TCLIServiceGetColumnsResult {
	return &TCLIServiceGetColumnsResult{}
}

var TCLIServiceGetColumnsResult_Success_DEFAULT *TGetColumnsResp

func (p *TCLIServiceGetColumnsResult) GetSuccess() *TGetColumnsResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetColumnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetColumnsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetColumnsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetColumns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetColumnsResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetFunctionsArgs struct {
	Req *TGetFunctionsReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetFunctionsArgs() *TCLIServiceGetFunctionsArgs {
	return &TCLIServiceGetFunctionsArgs{}
}

var TCLIServiceGetFunctionsArgs_Req_DEFAULT *TGetFunctionsReq

func (p *TCLIServiceGetFunctionsArgs) GetReq() *TGetFunctionsReq {
	if !p.IsSetReq() {
		return TCLIServiceGetFunctionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetFunctionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetFunctionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetFunctionsArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetFunctionsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetFunctionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFunctions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetFunctionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetFunctionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetFunctionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetFunctionsResult struct {
	Success *TGetFunctionsResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetFunctionsResult() *TCLIServiceGetFunctionsResult {
	return &TCLIServiceGetFunctionsResult{}
}

var TCLIServiceGetFunctionsResult_Success_DEFAULT *TGetFunctionsResp

func (p *TCLIServiceGetFunctionsResult) GetSuccess() *TGetFunctionsResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetFunctionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetFunctionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetFunctionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetFunctionsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetFunctionsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetFunctionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFunctions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetFunctionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetFunctionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetFunctionsResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetOperationStatusArgs struct {
	Req *TGetOperationStatusReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetOperationStatusArgs() *TCLIServiceGetOperationStatusArgs {
	return &TCLIServiceGetOperationStatusArgs{}
}

var TCLIServiceGetOperationStatusArgs_Req_DEFAULT *TGetOperationStatusReq

func (p *TCLIServiceGetOperationStatusArgs) GetReq() *TGetOperationStatusReq {
	if !p.IsSetReq() {
		return TCLIServiceGetOperationStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetOperationStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetOperationStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetOperationStatusArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetOperationStatusReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetOperationStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOperationStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetOperationStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetOperationStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetOperationStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetOperationStatusResult struct {
	Success *TGetOperationStatusResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetOperationStatusResult() *TCLIServiceGetOperationStatusResult {
	return &TCLIServiceGetOperationStatusResult{}
}

var TCLIServiceGetOperationStatusResult_Success_DEFAULT *TGetOperationStatusResp

func (p *TCLIServiceGetOperationStatusResult) GetSuccess() *TGetOperationStatusResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetOperationStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetOperationStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetOperationStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetOperationStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetOperationStatusResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetOperationStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOperationStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetOperationStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetOperationStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetOperationStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceCancelOperationArgs struct {
	Req *TCancelOperationReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceCancelOperationArgs() *TCLIServiceCancelOperationArgs {
	return &TCLIServiceCancelOperationArgs{}
}

var TCLIServiceCancelOperationArgs_Req_DEFAULT *TCancelOperationReq

func (p *TCLIServiceCancelOperationArgs) GetReq() *TCancelOperationReq {
	if !p.IsSetReq() {
		return TCLIServiceCancelOperationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceCancelOperationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceCancelOperationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCancelOperationArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TCancelOperationReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceCancelOperationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelOperation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCancelOperationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceCancelOperationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCancelOperationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceCancelOperationResult struct {
	Success *TCancelOperationResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceCancelOperationResult() *TCLIServiceCancelOperationResult {
	return &TCLIServiceCancelOperationResult{}
}

var TCLIServiceCancelOperationResult_Success_DEFAULT *TCancelOperationResp

func (p *TCLIServiceCancelOperationResult) GetSuccess() *TCancelOperationResp {
	if !p.IsSetSuccess() {
		return TCLIServiceCancelOperationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceCancelOperationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceCancelOperationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCancelOperationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TCancelOperationResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceCancelOperationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelOperation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCancelOperationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceCancelOperationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCancelOperationResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceCloseOperationArgs struct {
	Req *TCloseOperationReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceCloseOperationArgs() *TCLIServiceCloseOperationArgs {
	return &TCLIServiceCloseOperationArgs{}
}

var TCLIServiceCloseOperationArgs_Req_DEFAULT *TCloseOperationReq

func (p *TCLIServiceCloseOperationArgs) GetReq() *TCloseOperationReq {
	if !p.IsSetReq() {
		return TCLIServiceCloseOperationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceCloseOperationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceCloseOperationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCloseOperationArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TCloseOperationReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceCloseOperationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloseOperation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCloseOperationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceCloseOperationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCloseOperationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceCloseOperationResult struct {
	Success *TCloseOperationResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceCloseOperationResult() *TCLIServiceCloseOperationResult {
	return &TCLIServiceCloseOperationResult{}
}

var TCLIServiceCloseOperationResult_Success_DEFAULT *TCloseOperationResp

func (p *TCLIServiceCloseOperationResult) GetSuccess() *TCloseOperationResp {
	if !p.IsSetSuccess() {
		return TCLIServiceCloseOperationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceCloseOperationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceCloseOperationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCloseOperationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TCloseOperationResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceCloseOperationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloseOperation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCloseOperationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceCloseOperationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCloseOperationResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetResultSetMetadataArgs struct {
	Req *TGetResultSetMetadataReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetResultSetMetadataArgs() *TCLIServiceGetResultSetMetadataArgs {
	return &TCLIServiceGetResultSetMetadataArgs{}
}

var TCLIServiceGetResultSetMetadataArgs_Req_DEFAULT *TGetResultSetMetadataReq

func (p *TCLIServiceGetResultSetMetadataArgs) GetReq() *TGetResultSetMetadataReq {
	if !p.IsSetReq() {
		return TCLIServiceGetResultSetMetadataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetResultSetMetadataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetResultSetMetadataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetResultSetMetadataArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetResultSetMetadataReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetResultSetMetadataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetResultSetMetadata_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetResultSetMetadataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetResultSetMetadataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetResultSetMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetResultSetMetadataResult struct {
	Success *TGetResultSetMetadataResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetResultSetMetadataResult() *TCLIServiceGetResultSetMetadataResult {
	return &TCLIServiceGetResultSetMetadataResult{}
}

var TCLIServiceGetResultSetMetadataResult_Success_DEFAULT *TGetResultSetMetadataResp

func (p *TCLIServiceGetResultSetMetadataResult) GetSuccess() *TGetResultSetMetadataResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetResultSetMetadataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetResultSetMetadataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetResultSetMetadataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetResultSetMetadataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetResultSetMetadataResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetResultSetMetadataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetResultSetMetadata_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetResultSetMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetResultSetMetadataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetResultSetMetadataResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceFetchResultsArgs struct {
	Req *TFetchResultsReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceFetchResultsArgs() *TCLIServiceFetchResultsArgs {
	return &TCLIServiceFetchResultsArgs{}
}

var TCLIServiceFetchResultsArgs_Req_DEFAULT *TFetchResultsReq

func (p *TCLIServiceFetchResultsArgs) GetReq() *TFetchResultsReq {
	if !p.IsSetReq() {
		return TCLIServiceFetchResultsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceFetchResultsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceFetchResultsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceFetchResultsArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TFetchResultsReq{
		Orientation: 0,
	}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceFetchResultsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchResults_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceFetchResultsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceFetchResultsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceFetchResultsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceFetchResultsResult struct {
	Success *TFetchResultsResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceFetchResultsResult() *TCLIServiceFetchResultsResult {
	return &TCLIServiceFetchResultsResult{}
}

var TCLIServiceFetchResultsResult_Success_DEFAULT *TFetchResultsResp

func (p *TCLIServiceFetchResultsResult) GetSuccess() *TFetchResultsResp {
	if !p.IsSetSuccess() {
		return TCLIServiceFetchResultsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceFetchResultsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceFetchResultsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceFetchResultsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TFetchResultsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceFetchResultsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchResults_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceFetchResultsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceFetchResultsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceFetchResultsResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceGetDelegationTokenArgs struct {
	Req *TGetDelegationTokenReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceGetDelegationTokenArgs() *TCLIServiceGetDelegationTokenArgs {
	return &TCLIServiceGetDelegationTokenArgs{}
}

var TCLIServiceGetDelegationTokenArgs_Req_DEFAULT *TGetDelegationTokenReq

func (p *TCLIServiceGetDelegationTokenArgs) GetReq() *TGetDelegationTokenReq {
	if !p.IsSetReq() {
		return TCLIServiceGetDelegationTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceGetDelegationTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceGetDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TGetDelegationTokenReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceGetDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDelegationToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceGetDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceGetDelegationTokenResult struct {
	Success *TGetDelegationTokenResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceGetDelegationTokenResult() *TCLIServiceGetDelegationTokenResult {
	return &TCLIServiceGetDelegationTokenResult{}
}

var TCLIServiceGetDelegationTokenResult_Success_DEFAULT *TGetDelegationTokenResp

func (p *TCLIServiceGetDelegationTokenResult) GetSuccess() *TGetDelegationTokenResp {
	if !p.IsSetSuccess() {
		return TCLIServiceGetDelegationTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceGetDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceGetDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceGetDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TGetDelegationTokenResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceGetDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDelegationToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceGetDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceGetDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceGetDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceCancelDelegationTokenArgs struct {
	Req *TCancelDelegationTokenReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceCancelDelegationTokenArgs() *TCLIServiceCancelDelegationTokenArgs {
	return &TCLIServiceCancelDelegationTokenArgs{}
}

var TCLIServiceCancelDelegationTokenArgs_Req_DEFAULT *TCancelDelegationTokenReq

func (p *TCLIServiceCancelDelegationTokenArgs) GetReq() *TCancelDelegationTokenReq {
	if !p.IsSetReq() {
		return TCLIServiceCancelDelegationTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceCancelDelegationTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceCancelDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCancelDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TCancelDelegationTokenReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceCancelDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelDelegationToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCancelDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceCancelDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCancelDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceCancelDelegationTokenResult struct {
	Success *TCancelDelegationTokenResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceCancelDelegationTokenResult() *TCLIServiceCancelDelegationTokenResult {
	return &TCLIServiceCancelDelegationTokenResult{}
}

var TCLIServiceCancelDelegationTokenResult_Success_DEFAULT *TCancelDelegationTokenResp

func (p *TCLIServiceCancelDelegationTokenResult) GetSuccess() *TCancelDelegationTokenResp {
	if !p.IsSetSuccess() {
		return TCLIServiceCancelDelegationTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceCancelDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceCancelDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceCancelDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TCancelDelegationTokenResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceCancelDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelDelegationToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceCancelDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceCancelDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceCancelDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - Req
type TCLIServiceRenewDelegationTokenArgs struct {
	Req *TRenewDelegationTokenReq `thrift:"req,1" json:"req"`
}

func NewTCLIServiceRenewDelegationTokenArgs() *TCLIServiceRenewDelegationTokenArgs {
	return &TCLIServiceRenewDelegationTokenArgs{}
}

var TCLIServiceRenewDelegationTokenArgs_Req_DEFAULT *TRenewDelegationTokenReq

func (p *TCLIServiceRenewDelegationTokenArgs) GetReq() *TRenewDelegationTokenReq {
	if !p.IsSetReq() {
		return TCLIServiceRenewDelegationTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TCLIServiceRenewDelegationTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TCLIServiceRenewDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceRenewDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	p.Req = &TRenewDelegationTokenReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *TCLIServiceRenewDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RenewDelegationToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceRenewDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *TCLIServiceRenewDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceRenewDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCLIServiceRenewDelegationTokenResult struct {
	Success *TRenewDelegationTokenResp `thrift:"success,0" json:"success,omitempty"`
}

func NewTCLIServiceRenewDelegationTokenResult() *TCLIServiceRenewDelegationTokenResult {
	return &TCLIServiceRenewDelegationTokenResult{}
}

var TCLIServiceRenewDelegationTokenResult_Success_DEFAULT *TRenewDelegationTokenResp

func (p *TCLIServiceRenewDelegationTokenResult) GetSuccess() *TRenewDelegationTokenResp {
	if !p.IsSetSuccess() {
		return TCLIServiceRenewDelegationTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCLIServiceRenewDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCLIServiceRenewDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCLIServiceRenewDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TRenewDelegationTokenResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCLIServiceRenewDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RenewDelegationToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCLIServiceRenewDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCLIServiceRenewDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCLIServiceRenewDelegationTokenResult(%+v)", *p)
}
