language: go


# SQLFlow uses sqlflow.org/sqlflow as vanity import path. TravisCI
# supports it via go_import_path.  Ref:
# https://docs.travis-ci.com/user/languages/go/#go-import-path
go_import_path: sqlflow.org/sqlflow
go:
- 1.13.x
branches:
  only:
  - gh-pages
  - develop
  - "/release-*/"
  - "/^v\\d+\\.\\d+(\\.\\d+)?(-\\S*)?$/"
service:
- docker


# Note(tony): Update to newer version of Docker to allow
# Dockerfile being outside of the context directory
# https://github.com/docker/compose/issues/4926#issuecomment-370501452
addons:
  apt:
    packages:
    - docker-ce
install:

# Note(tony): TravisCI's native `go get ${gobuild_args} ./...` failed with
# `/usr/bin/ld: final link failed: Bad value`, the cause is the system linker
# being not up to date: https://github.com/golang/go/issues/15038
# So I decided to skip install, and go get inside SQLFlow devbox Docker image
# Ref build: https://travis-ci.com/sql-machine-learning/sqlflow/builds/107870583
- echo "skip install"
jobs:
  include:
  - stage: BuildAndTest
    script:
    - set -e
    - $TRAVIS_BUILD_DIR/scripts/travis/build.sh
    - docker run --rm -it -v $TRAVIS_BUILD_DIR:/work -w /work sqlflow:dev
      pre-commit run -a --show-diff-on-failure
  - os: osx
    scripts:
    - $TRAVIS_BUILD_DIR/scripts/travis/deploy_cli_macos.sh
  - env: SQLFLOW_TEST_DB=mysql
    script:
    - set -e
    - $TRAVIS_BUILD_DIR/scripts/travis/build.sh
    - docker run --rm -v $TRAVIS_BUILD_DIR:/work -w /work sqlflow:ci
      scripts/test/units.sh
    - docker run --rm -v $TRAVIS_BUILD_DIR:/work -w /work sqlflow:ci
      scripts/upload_coveralls.sh
  - env: SQLFLOW_TEST_DB=hive # run more parallel tests in the same stage:
    script:
    - set -e
    - $TRAVIS_BUILD_DIR/scripts/travis/build.sh
    - docker pull sqlflow/gohive:dev
    - docker run -d --name=hive sqlflow/gohive:dev python3 -m http.server 8899
    - docker run --rm -it --net=container:hive
      -v $TRAVIS_BUILD_DIR:/work -w /work
      -v $GOPATH:/root/go
      sqlflow:ci scripts/test/hive.sh
  - env: SQLFLOW_TEST_DB=maxcompute
    script:
    - set -e
    - $TRAVIS_BUILD_DIR/scripts/travis/build.sh
    - $TRAVIS_BUILD_DIR/scripts/travis/setup_minikube.sh
    - docker run --rm --net=host
      -v /var/run/docker.sock:/var/run/docker.sock
      -v $HOME/.kube:/root/.kube
      -v /home/$USER/.minikube/:/home/$USER/.minikube/
      -v $TRAVIS_BUILD_DIR:/work -w /work
      sqlflow:ci scripts/test/ipython.sh
    - docker run --rm --net=host
      -e SQLFLOW_TEST_DB_MAXCOMPUTE_AK=$MAXCOMPUTE_AK
      -e SQLFLOW_TEST_DB_MAXCOMPUTE_SK=$MAXCOMPUTE_SK
      -v /var/run/docker.sock:/var/run/docker.sock
      -v $HOME/.kube:/root/.kube
      -v /home/$USER/.minikube/:/home/$USER/.minikube/
      -v $TRAVIS_BUILD_DIR:/work -w /work
      sqlflow:ci scripts/test/maxcompute.sh
  - env: SQLFLOW_TEST=java
    script:
    - set -e
    - $TRAVIS_BUILD_DIR/scripts/travis/build.sh
    - docker run --rm
      -v $TRAVIS_BUILD_DIR:/work -w /work
      sqlflow:ci scripts/test/java.sh
  - env: SQLFLOW_TEST=workflow
    script:
    - set -e
    - $TRAVIS_BUILD_DIR/scripts/travis/setup_minikube.sh
    - eval $(sudo minikube docker-env)
    - $TRAVIS_BUILD_DIR/scripts/travis/build.sh
    - docker tag sqlflow:ci sqlflow:submitter
    - docker run --rm --net=host
      -e SQLFLOW_WORKFLOW_STEP_IMAGE=sqlflow:submitter
      -v /var/run/docker.sock:/var/run/docker.sock
      -v $HOME/.kube:/root/.kube
      -v /home/$USER/.minikube/:/home/$USER/.minikube/
      -v $TRAVIS_BUILD_DIR:/work -w /work
      sqlflow:ci scripts/test/workflow.sh
  - stage: Deploy
    script:
    - $TRAVIS_BUILD_DIR/scripts/travis/deploy.sh # Push only after PR merging.
env:
  global:
    # AWS_ACCESS_KEY_ID
    secure: "ACqc/HehsplG7kwPK9vt1RVX5fNxCPrBr2YgvBEZPqsqg/MCPI6DOgHJ5MjKDLGLgDZ2csJxY69yUP+P1yIj5mAN2VrKNe685dQq2/8xFm+MrZ1Y6Oa5/XhIOy7ZHQ34PzFR7ShHA/TIBaY0lOMnpDDwxrzi2kplurF9CIyymeUSVTgOfGjEc3rZ0IHknHMDoMrHIZ8T2Ayq/FiBWWEqkyIH98/YZr5JbzNTZTzQDgjkUVmjCmrIDc9WVHPZT/bGcoQEy+ZEB7jmqqmE/qAkGunpUUBzp5yQ6+U6OQIDdSsA8TYgFczFYquECVwoc35deJNNvOuc9QSCn8tBxp7MiTYrCRhuZBQ2YpGe7ZEuYN6Rc0OevpMsxAI9UNvcXmuos7KygT+mNwonWrtDmlkAHcaE0+T7huZMMIiu/s8LmeLc9Ca/uZVcVJAL9GnKU00bI2WRQqYkI0LfhSclPCXimvHjD6iSf7NMx03QnFBfQLTzesTP3FUcLKPqzJi7fR0QP4zEBthKFmfA2gGkgvCOohYQofXkdY1FFTugR8lQYMSkAB+GsmWE7iHSWfuWNbWeM2qQPCLn7zBCO1xJSX08FJOogUsRss7HX8tiSpoTLwCKo6nbJGBOCj27H5+/9Awbs8WgyzB2xBJUjsBgMv+FopQD0n+LhaZeGYiyIeFMZ+w="
    # AWS_SECRET_ACCESS_KEY
    secure: "hT2eDFk+adKvtrUvGctl6ZVruGSDhkpCnLo9tn/aSlJFUO/LW7zE/mrr+WwV7v+JX4YRan1kii6hDvuUZXjTZlGHqmuVgPqUga6UuyiyKz4pnsNDhyj1Yt9JWMfoM+DrE5mAnla8ixHG8L+mPuegutCyLyKx8Wcyxo+LeViKhJBXX9Vx1JjpazjBAFMR/FBDtIEzhsskjBddUV0waoP9o0gUei8JtjjLqEJqmCTYKRPmokJ1nKf2mWQUu0TQKdKJEx4/bfGLIssVCRxiedbu4rj1NRMzMD+8joThjT/8OLIFy9AWYxmgbdIHTK9SGLxzUc/KwnATLyGFC5vYJOqAl6UXtF3UnAKOFDiCFrC4KfzcofK6r0mKoEl5eeGx5J2a9+pDcATrrt3tL+vA4QCRuL/KBlWgu78Utip1FtT9JBKzinmBBb8N5wzPOyBTcBjBC6pmO0V5DbOE8NHatAIQsUKaB06uDtltepHkk6wkulHBQJ4YaZcP3P23lXitSZvZD35Y6hDJl+OvuzG3Q3EQRF3yLuskHEVebLVWgraUfc0QhtS3jphnphNz1R4s4GyzM+b5OrRvpNa+CxSxy4e8rpTASlexfO//BzY82Thgm4mMwDIFK+Um1KisLLhBZywmYNMfOGCsW675QIA0htO4CGVBofGQV12uFXzAXjc1uGg="
